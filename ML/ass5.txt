import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.svm import SVC
from sklearn.svm import LinearSVC
import math
import time

df=pd.read_csv('emails.csv')
df

df.drop(["Email No."],axis=1, inplace=True)
df.head()

x=df.drop(['Prediction'],axis = 1)
y = df['Prediction']

x_train,x_test, y_train,y_test=train_test_split(x,y,test_size=0.3)

k=KNeighborsClassifier(n_neighbors=6)
model=k.fit(x_train,y_train)
y_pred=model.predict(x_test)

print(classification_report(y_test,y_pred))

S=StandardScaler()
R=RobustScaler()
M=MinMaxScaler()

print('------------------------------------------STANDARD-----------------------------------------------')
x1=S.fit_transform(x)
x_train1,x_test1, y_train1,y_test1=train_test_split(x1,y,test_size=0.3)
k=KNeighborsClassifier(n_neighbors=6)
model=k.fit(x_train1,y_train1)
y_pred1=model.predict(x_test1)
print(classification_report(y_test1,y_pred1))
print('------------------------------------------ROBUST-----------------------------------------------')

x2=R.fit_transform(x)
x_train2,x_test2, y_train2,y_test2=train_test_split(x2,y,test_size=0.3)
k=KNeighborsClassifier(n_neighbors=6)
model=k.fit(x_train2,y_train2)
y_pred2=model.predict(x_test2)
print(classification_report(y_test2,y_pred2))
print('------------------------------------------MINMAX-----------------------------------------------')

x3=M.fit_transform(x)
x_train3,x_test3, y_train3,y_test3=train_test_split(x3,y,test_size=0.3)
k=KNeighborsClassifier(n_neighbors=6)
model=k.fit(x_train3,y_train3)
y_pred3=model.predict(x_test3)
print(classification_report(y_test3,y_pred3))




l=LinearSVC()
p=SVC(kernel="poly", C=2)
s=SVC(kernel="sigmoid",C=2)
r=SVC(kernel="rbf", C=2)

x_train,x_test, y_train,y_test=train_test_split(x,y,test_size=0.3)
print('------------------------------------------LINEAR-----------------------------------------------')
Start=time.time()
model=l.fit(x_train,y_train)
y_pred=model.predict(x_test)
print(classification_report(y_test,y_pred))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------POLY-----------------------------------------------')

Start=time.time()
model=p.fit(x_train,y_train)
y_pred=model.predict(x_test)
print(classification_report(y_test,y_pred))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------SIGMOID-----------------------------------------------')

Start=time.time()
model=s.fit(x_train,y_train)
y_pred=model.predict(x_test)
print(classification_report(y_test,y_pred))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------RBF-----------------------------------------------')

Start=time.time()
model=r.fit(x_train,y_train)
y_pred=model.predict(x_test)
print(classification_report(y_test,y_pred))
end=time.time()

print(f"{end-Start:.5f}sec")




print('------------------------------------------STANDARD-----------------------------------------------')
x1=S.fit_transform(x)
x_train1,x_test1, y_train1,y_test1=train_test_split(x1,y,test_size=0.3)
print('------------------------------------------LINEAR-----------------------------------------------')
Start=time.time()
model=l.fit(x_train1,y_train1)
y_pred1=model.predict(x_test1)
print(classification_report(y_test1,y_pred1))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------POLY-----------------------------------------------')

Start=time.time()
model=p.fit(x_train1,y_train1)
y_pred1=model.predict(x_test1)
print(classification_report(y_test1,y_pred1))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------SIGMOID-----------------------------------------------')

Start=time.time()
model=s.fit(x_train1,y_train1)
y_pred1=model.predict(x_test1)
print(classification_report(y_test1,y_pred1))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------RBF-----------------------------------------------')

Start=time.time()
model=r.fit(x_train1,y_train1)
y_pred1=model.predict(x_test1)
print(classification_report(y_test1,y_pred1))
end=time.time()

print(f"{end-Start:.5f}sec")















print('------------------------------------------ROBUST-----------------------------------------------')
x2=R.fit_transform(x)
x_train2,x_test2, y_train2,y_test2=train_test_split(x2,y,test_size=0.3)
print('------------------------------------------LINEAR-----------------------------------------------')
Start=time.time()
model=l.fit(x_train2,y_train2)
y_pred2=model.predict(x_test2)
print(classification_report(y_test2,y_pred2))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------POLY-----------------------------------------------')

Start=time.time()
model=p.fit(x_train2,y_train2)
y_pred2=model.predict(x_test2)
print(classification_report(y_test2,y_pred2))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------SIGMOID-----------------------------------------------')

Start=time.time()
model=s.fit(x_train2,y_train2)
y_pred2=model.predict(x_test2)
print(classification_report(y_test2,y_pred2))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------RBF-----------------------------------------------')

Start=time.time()
model=r.fit(x_train2,y_train2)
y_pred2=model.predict(x_test2)
print(classification_report(y_test2,y_pred2))
end=time.time()

print(f"{end-Start:.5f}sec")
















print('------------------------------------------MINMAX-----------------------------------------------')
x3=M.fit_transform(x)
x_train3,x_test3, y_train3,y_test3=train_test_split(x3,y,test_size=0.3)
print('------------------------------------------LINEAR-----------------------------------------------')
Start=time.time()
model=l.fit(x_train3,y_train3)
y_pred3=model.predict(x_test3)
print(classification_report(y_test3,y_pred3))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------POLY-----------------------------------------------')

Start=time.time()
model=p.fit(x_train3,y_train3)
y_pred3=model.predict(x_test3)
print(classification_report(y_test3,y_pred3))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------SIGMOID-----------------------------------------------')

Start=time.time()
model=s.fit(x_train3,y_train3)
y_pred3=model.predict(x_test3)
print(classification_report(y_test3,y_pred3))
end=time.time()

print(f"{end-Start:.5f}sec")

print('------------------------------------------RBF-----------------------------------------------')

Start=time.time()
model=r.fit(x_train3,y_train3)
y_pred3=model.predict(x_test3)
print(classification_report(y_test3,y_pred3))
end=time.time()

print(f"{end-Start:.5f}sec")
